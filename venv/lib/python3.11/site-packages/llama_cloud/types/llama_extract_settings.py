# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic
    if pydantic.__version__.startswith("1."):
        raise ImportError
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class LlamaExtractSettings(pydantic.BaseModel):
    """
    All settings for the extraction agent. Only the settings in ExtractConfig
    are exposed to the user.
    """

    model: typing.Optional[str] = pydantic.Field(description="The model to use for the extraction.")
    temperature: typing.Optional[float] = pydantic.Field(description="The temperature to use for the extraction.")
    max_file_size: typing.Optional[int] = pydantic.Field(
        description="The maximum file size (in bytes) allowed for the document."
    )
    max_num_pages: typing.Optional[int] = pydantic.Field(
        description="The maximum number of pages allowed for the document."
    )
    extraction_prompt: typing.Optional[str] = pydantic.Field(description="The prompt to use for the extraction.")
    error_handling_prompt: typing.Optional[str] = pydantic.Field(description="The prompt to use for error handling.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
